library(fishtree)
#loading data
data<-read.csv("binaryTraitData.csv",header = T)
summary(data)
help("fishtree_complete_phylogeny")
#accessing tree block
treeBlock<-fishtree_complete_phylogeny(data$species)
#accessing single tree
treeSingle<-fishtree_phylogeny(data$species)
#accessing tree block
treeBlock<-fishtree_complete_phylogeny(data$species)
#loading data
data<-read.csv("binaryTraitData.csv",header = T)
#accessing tree block
treeBlock<-fishtree_complete_phylogeny(data$species)
#accessing single tree
treeSingle<-fishtree_phylogeny(data$species)
saveRDS(treeBlock, file = "treeBlock.rds")
saveRDS(treeSingle, file = "treeSingle.rds")
#loading libraries
if (packageVersion("corHMM")<"2.6.1") {
stop("need hacked version of corHMM. Try 'remotes::install_github(\"bbolker/corHMM\", build_vignettes=TRUE)'")
}
## if installation fails when building vignettes drop build_vignettes=TRUE (default is FALSE)
library(corHMM)
install.packages("corHMM")
#loading libraries
if (packageVersion("corHMM")<"2.6.1") {
stop("need hacked version of corHMM. Try 'remotes::install_github(\"bbolker/corHMM\", build_vignettes=TRUE)'")
}
## if installation fails when building vignettes drop build_vignettes=TRUE (default is FALSE)
library(corHMM)
library(bbmle)     ## for likelihood profiles/CIs
library(numDeriv)  ## for Hessian/Wald CIs
library(MCMCpack)  ## for Bayes (Metropolis-Hastings) run
library(coda)
library(lattice)
library(ggplot2); theme_set(theme_bw())
install.packages("bbmle")
library(bbmle)     ## for likelihood profiles/CIs
library(numDeriv)  ## for Hessian/Wald CIs
library(MCMCpack)  ## for Bayes (Metropolis-Hastings) run
install.packages("MCMCpack")
library(coda)
library(lattice)
library(ggplot2); theme_set(theme_bw())
library(colorspace)
library(GGally)
install.packages("GGally")
library(GGally)
library(ggthemes)
install.packages("ggthemes")
library(ggthemes)
library(fishtree)
(MK_3state <- corHMM(phy = phy, data = data, rate.cat = 1))
data<-read.csv(binaryTraitData)
data<-read.csv(binaryTraitData.csv)
data<-read.csv("binaryTraitData.csv",header = T)
datq
data
phy<-fishtree_phylogeny(data$species)
(MK_3state <- corHMM(phy = phy, data = data, rate.cat = 1))
library(ape)
library(caper)
allData<-read.csv("binaryTraitData.csv",header = T)
fullPhy<-fishtree_phylogeny(allData$species)
allData<-read.csv("binaryTraitData.csv",header = T)
fullPhy<-fishtree_phylogeny(allData$species)
traitData<-data.frame(species=allData$species, ag=allData$ag, care=allData$care, mating=allData$mating, names=allData$species)
comparative.data(fullPhy,traitData, names.col = names)
trimmedData<-comparative.data(fullPhy,traitData, names.col = names)
phy<-trimmedData$phy
data<-trimmedData$data
(MK_3state <- corHMM(phy = phy, data = data, rate.cat = 1))
help("corHMM")
LegendAndRateMat<-getStateMat4Dat(data)
RateMat<-LegendAndRateMat$rate.mat
RateMat
getStateMat4Dat(data)
help("equateStateMatPars")
pars2equal<-list(c(7,10,20,23))
StateMatA_constrained<-equateStateMatPars(RateMat, pars2equal)
StateMatA_constrained
pars2equal<-list(c(7,10,20,23), c(4,11,17,24))
StateMatA_constrained<-equateStateMatPars(RateMat, pars2equal)
StateMatA_constrained
getStateMat4Dat(data)
pars2equal<-list(c(7,10,20,23), c(4,11,17,24), c(2,5,15,18), c(1,8,14,21))
StateMatA_constrained<-equateStateMatPars(RateMat, pars2equal)
StateMatA_constrained
#making the simplified model
MK_3state_simple <- corHMM(phy = phy, data = data, rate.cat = 1, rate.mat = StateMatA_constrained)
MK_3state_simple
do.call(corHMM:::dev.corhmm,MK_3state_simple$args.list)
remotes::install_github(\"bbolker/corHMM\", build_vignettes=TRUE)
remotes::install_github("bbolker/corHMM\", build_vignettes=TRUE)
remotes::install_github("bbolker/corHMM\", build_vignettes=TRUE)")
#loading packages
if (packageVersion("corHMM")<"2.6.1") {
stop("need hacked version of corHMM. Try 'remotes::install_github(\"bbolker/corHMM\", build_vignettes=TRUE)'")
}
## if installation fails when building vignettes drop build_vignettes=TRUE (default is FALSE)
library(corHMM)
library(bbmle)     ## for likelihood profiles/CIs
#loading packages
if (packageVersion("corHMM")<"2.6.1") {
stop("need hacked version of corHMM. Try 'remotes::install_github(\"bbolker/corHMM\", build_vignettes=TRUE)'")
}
do.call(corHMM:::dev.corhmm,MK_3state_simple$args.list)
remotes::install_github("bbolker/corHMM", build_vignettes=TRUE)
install.packages("remotes")
library(remotes)
remotes::install_github("bbolker/corHMM", build_vignettes=TRUE)
